package org.xper.allen.nafc.blockgen.test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.junit.Test;
import org.springframework.config.java.context.JavaConfigApplicationContext;
import org.xper.allen.drawing.composition.AllenMatchStick;
import org.xper.allen.nafc.blockgen.AbstractPsychometricNoiseMapGenerator;
import org.xper.allen.nafc.blockgen.NoisyMStickPngPsychometricBlockGen;
import org.xper.allen.nafc.blockgen.PsychometricTrial;
import org.xper.util.FileUtil;

public class PsychometricTrialTest {
	JavaConfigApplicationContext context = new JavaConfigApplicationContext(
			FileUtil.loadConfigClass("experiment.ga.config_class"));

	NoisyMStickPngPsychometricBlockGen gen = (NoisyMStickPngPsychometricBlockGen) context.getBean(AbstractPsychometricNoiseMapGenerator.class);
	int numPsychometricDistractors = 2;
	int numRandDistractors = 1;
	PsychometricTrial testTrial = new PsychometricTrial(gen, numPsychometricDistractors, numRandDistractors);
	
	@Test
	public void gotGenBean() {
		assertEquals(NoisyMStickPngPsychometricBlockGen.class, gen.getClass());
	}
	
	@Test
	public void writeExecutesAndSavesToDb() {
		gen.getPngMaker().createDrawerWindow();
		prepareWrite();
		randDistractorsGenerated();
		
		long taskTodo = testTrial.write();
		dBUpdated(taskTodo);
	}
	
	public void prepareWrite() {
		long setId = 1653428280110274L;
		int stimId = 0;
		List<Integer> stimIds = Arrays.asList(0,1,2);
		double[] noiseChance = new double[] {1,1};
		
		testTrial.prepareWrite(setId, stimId, stimIds, noiseChance);
		assertNotNull("NoiseData is null, prepareWrite() did not finish execution", testTrial.getNoiseData());
		
		idsMatch(setId, stimId);
		specFileExists();
		sampleObjExists();
		
	}
	
	private void randDistractorsGenerated() {
		//Testing Objs
		List<AllenMatchStick> objs = testTrial.getObjs_randDistractor();
		for (AllenMatchStick obj:objs) {
			assertNotNull(obj.getComp()[1]);
		}
		
		//Testing .pngs
		for (String path: testTrial.getDistractorsPngPaths()) {
			assertNotNull("distractor .png with path " + path + " does not exist",
					new File(path).exists());
		}
	}
	
	/**
	 * write()
	 * writes StimObjData and StimSpec
	 * @param expectedTaskTodo
	 */
	public void dBUpdated(long expectedTaskTodo) {
		//Test stimSpec
		assertEquals(expectedTaskTodo, gen.getDbUtil().readStimSpecMaxId());
	
		//Test stimObjData
		List<Long> expectedStimObjIds = new ArrayList<Long>();
		expectedStimObjIds.add(testTrial.getSampleId());
		expectedStimObjIds.add(testTrial.getMatchId());
		expectedStimObjIds.addAll(testTrial.getDistractorsIds());
		
		assertEquals("The number of esxpected stimObjIds does not match the number generated by the class",
				2 + numRandDistractors+numPsychometricDistractors,expectedStimObjIds.size());
		for (Long expectedStimObjId: expectedStimObjIds) {
			assertNotNull("Expected StimObjId does not exist in db!", testTrial.getDbUtil().readStimObjData(expectedStimObjId));
		}
	}
	
	public void idsMatch(long setId, int stimId) {
		assertEquals(setId, testTrial.getSampleSetId());
		System.out.println("SampleSetId: " + testTrial.getSampleSetId());
		assertEquals(stimId, testTrial.getSampleStimId());
		System.out.println("SampleStimId: " + testTrial.getSampleStimId());
	}
	
	public void specFileExists(){
		String path = testTrial.getSpecPath() + "/" + testTrial.getSampleSetId() + "_" + testTrial.getSampleStimId() + "_spec.xml";
		File file = new File(path);
		
		assertTrue("specFile does not exist. Looking for " + path,file.exists());
	}
	

	public void sampleObjExists() {
		assertNotNull("SampleObj doesn't exist", testTrial.getSampleObj());
	}
	


}
